@a = dso_local global [6 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6]
@_str_0 = constant [4 x i8] c" - \00"

declare i32 @getint()

declare i32 @getchar()

declare void @putint(i32)

declare void @putch(i8)

declare void @putstr(i8*)

define dso_local i32 @foo(i32, i32*){
;<label>:2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32*
	store i32* %1, i32** %4
	%5 = load i32, i32* %3
	%6 = load i32*, i32** %4
	%7 = getelementptr i32, i32* %6, i32 2
	%8 = load i32, i32* %7
	%9 = add i32 %5, %8
	ret i32 %9
}

define dso_local i32 @main(){
;<label>:0:
	%1 = alloca [3 x i32]
	%2 = getelementptr [3 x i32], [3 x i32]* %1, i32 0, i32 0
	store i32 1, i32* %2
	%3 = getelementptr [3 x i32], [3 x i32]* %1, i32 0, i32 1
	store i32 2, i32* %3
	%4 = getelementptr [3 x i32], [3 x i32]* %1, i32 0, i32 2
	store i32 3, i32* %4
	%5 = getelementptr [6 x i32], [6 x i32]* @a, i32 0, i32 4
	%6 = load i32, i32* %5
	%7 = getelementptr [6 x i32], [6 x i32]* @a, i32 0, i32 0
	%8 = call i32 @foo(i32 %6, i32* %7)
	%9 = alloca i32
	store i32 %8, i32* %9
	%10 = load i32, i32* %9
	%11 = getelementptr [3 x i32], [3 x i32]* %1, i32 0, i32 0
	%12 = load i32, i32* %11
	%13 = getelementptr [3 x i32], [3 x i32]* %1, i32 0, i32 0
	%14 = call i32 @foo(i32 %12, i32* %13)
	call void @putint(i32 %10)
	%15 = getelementptr inbounds [4 x i8], [4 x i8]* @_str_0, i32 0, i32 0
	call void @putstr(i8* %15)
	call void @putint(i32 %14)
	call void @putch(i8 10)
	ret i32 0
}

